create or replace PACKAGE BODY OPS$ANDES.PKG_BEN_PRESTACIONES AS

  PROCEDURE PRD_GET_PLANES(P_PER_RUT IN ppc_perconpla.per_rut%TYPE,
                            V_OBTIENE_PLANES OUT V_CURSOR) AS
    V_PER_RUT ppc_perconpla.per_rut%TYPE := P_PER_RUT;
    V_EXISTERUT ppc_perconpla.per_rut%TYPE;  
    C_TYPEINACTIVO CONSTANT ppc_perconpla.per_codigo%TYPE := 'INA';
    C_TYPEACTIVO CONSTANT ppc_perconpla.per_codigo%TYPE := 'ACT';
    C_DESCACTIVO CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_VARCHAR2_6 := 'ACTIVO';
    C_DESCINACTIVO CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_VARCHAR2_8 := 'INACTIVO';
    C_DESCSIN CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_VARCHAR2_10 := 'SIN ESTADO';
    C_ECV_CODEMP CONSTANT ppc_perconpla.ecv_codemp%TYPE :='00';
    C_TAD_CODIGO CONSTANT ppc_convenio.tad_codigo%TYPE :='IND';
    C_TFO_CODIGO CONSTANT ppc_valcuo.tfo_codigo%TYPE :='PPC';

    C_ROUND CONSTANT INT := 2;

     -- EXCEPCION RUT PERSONA NULL
    V_PER_RUT_EXCEP_VALIDO EXCEPTION; 
    V_PER_RUT_EXCEP_VALIDO_COD CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_NUMBER:= -20002;
    V_PER_RUT_EXCEP_VALIDO_MSG CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_VARCHAR2_500:= 'RUT DE PERSONA NO VALIDO';
	
    -- EXCEPTION RUT NO EXISTE
    V_PERSONA_EXCEP_EXIST EXCEPTION;
    V_PERSONA_EXCEP_EXIST_COD CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_NUMBER:= -20001;
    V_PERSONA_EXCEP_EXIST_MSG CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_VARCHAR2_200:= 'RUT DE PERSONA NO EXISTE';
	
	-- EXCEPCIONES RECUPERA VARIAS FILAS
	V_TOO_MANY_ROWS_EXCEPTION_COD CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_NUMBER:= -20001;
    V_TOO_MANY_ROWS_EXCEPTION_MSG CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_VARCHAR2_50:= 'SELECT RECUPERA VARIAS FILAS';
	
	-- EXCEPCIONES DATOS NO ENCONTRADOS
	V_NO_DATA_FOUND_EXCEPTION_COD CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_NUMBER:= -20001;
    V_NO_DATA_FOUND_EXCEPTION_MSG CONSTANT PKG_BEN_PRESTACIONES.ST_TIPO_VARCHAR2_50:= 'DATOS NO ENCONTRADOS';
	
	-- EXCEPCIONES OTRAS
    V_OTHER_EXCEPTION_COD CONSTANT PKG_PCA_RENTINFORMADAS_OBTENER.ST_TIPO_NUMBER:= -20020;
	
  BEGIN
    <<VALIDA_EXISTE_RUT>>
    BEGIN
        SELECT PER_RUT INTO V_EXISTERUT FROM ppc_perconpla WHERE PER_RUT = V_PER_RUT AND ROWNUM=1;
         EXCEPTION
              WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(V_NO_DATA_FOUND_EXCEPTION_COD,V_NO_DATA_FOUND_EXCEPTION_MSG);
              WHEN TOO_MANY_ROWS THEN
                RAISE_APPLICATION_ERROR(V_TOO_MANY_ROWS_EXCEPTION_COD,V_TOO_MANY_ROWS_EXCEPTION_MSG);
              WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(V_OTHER_EXCEPTION_COD, SQLERRM);  
    END VALIDA_EXISTE_RUT;
    IF V_PER_RUT is null THEN
     RAISE_APPLICATION_ERROR(V_PER_RUT_EXCEPTION_NULL_COD,V_PER_RUT_EXCEPTION_NULL_MSG);
    ELSE
        OPEN V_OBTIENE_PLANES FOR
            SELECT 
            ppc.EMP_RUT, 
            emp.emp_digito, 
            emp.emp_razsoc emp_razsoc, 
            ppc.CON_CONVENIO, 
            ppc.PLA_PLAN, 
            CASE ppc.per_codigo
            WHEN C_TYPEINACTIVO THEN
                C_DESCINACTIVO
            WHEN C_TYPEACTIVO THEN 
                C_DESCACTIVO
            ELSE C_DESCSIN END per_descripcion, 
            ROUND(nvl((ppc.per_saldocontable_c * vcu.VCU_VALOR_CUOTA),0), C_ROUND) per_saldocontable_c, 
            ROUND(nvl(((ppc.PER_SALDOCONTABLE_C - ppc.PER_SALDORE30D_C) * vcu.VCU_VALOR_CUOTA + ppc.PER_SALDORETGIR_P),0), C_ROUND) per_saldodisponible_c
            FROM ppc_perconpla ppc
            LEFT JOIN afi_persona per ON ppc.per_rut = per.per_rut 
            LEFT JOIN afi_empresa emp ON emp.emp_rut = ppc.emp_rut
            LEFT JOIN ppc_convenio con ON con.ecv_codemp    = ppc.ecv_codemp AND con.emp_rut       = ppc.emp_rut AND con.con_convenio  = ppc.con_convenio
            LEFT JOIN ppc_valcuo vcu ON vcu.vcu_fecha = ppc.per_fecha_vigencia AND vcu.ecv_codemp = ppc.ecv_codemp AND vcu.tfo_codigo = C_TFO_CODIGO
            WHERE  ppc.per_rut = V_PER_RUT AND ppc.ecv_codemp = C_ECV_CODEMP AND con.tad_codigo = C_TAD_CODIGO
        ;
    END IF;
    EXCEPTION 
    WHEN V_PER_RUT_EXCEP_VALIDO THEN
        RAISE_APPLICATION_ERROR(V_PER_RUT_EXCEP_VALIDO_COD,V_PER_RUT_EXCEP_VALIDO_MSG);
    WHEN V_PERSONA_EXCEP_EXIST THEN
        RAISE_APPLICATION_ERROR(V_PERSONA_EXCEP_EXIST_COD,V_PERSONA_EXCEP_EXIST_MSG);
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(V_NO_DATA_FOUND_EXCEPTION_COD,V_NO_DATA_FOUND_EXCEPTION_MSG);
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(V_OTHER_EXCEPTION_COD, SQLERRM);
  END PRD_GET_PLANES;

END PKG_BEN_PRESTACIONES;